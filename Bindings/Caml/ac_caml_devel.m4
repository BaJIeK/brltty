# autoconf input for Objective Caml programs
# Copyright (C) 2001 Jean-Christophe Filliâtre
#   from a first script by Georges Mariano 
# 
# Modified to be an autoconf m4 function in 2006
# for BRLTTY [http://mielke.cc/brltty/]
# by Dave Mielke <dave@mielke.cc>
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found, 
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex" (or "ocamllex.opt" if present)
#   OCAMLYACC     "ocamlyac"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWEB      "ocamlweb" (not mandatory)
#   OCAMLWIN32    "yes"/"no" depending on Sys.os_type = "Win32"

AC_DEFUN([AC_CAML_DEVEL], [dnl
# Check for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
    AC_MSG_WARN([Cannot find ocamlc.])
else
    # we extract Ocaml version number and library path
    OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
    AC_MSG_NOTICE([OCaml version is $OCAMLVERSION])

    OCAMLLIB=`$OCAMLC -v | tail -1 | cut -f 4 -d " "`
    AC_MSG_NOTICE([OCaml library path is $OCAMLLIB])

    # then we look for ocamlopt; if not present, we issue a warning
    # if the version is not the same, we also discard it
    # we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
    AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
    OCAMLBEST=byte
    if test "$OCAMLOPT" = no ; then
        AC_MSG_WARN([Cannot find ocamlopt; bytecode compilation only.])
    else
        AC_MSG_CHECKING(ocamlopt version)
        TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != "$OCAMLVERSION" ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
            OCAMLOPT=no
        else
            AC_MSG_RESULT(ok)
            OCAMLBEST=opt
        fi
    fi

    # checking for ocamlc.opt
    AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
    if test "$OCAMLCDOTOPT" != no ; then
        AC_MSG_CHECKING(ocamlc.opt version)
        TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
        if test "$TMPVERSION" != "$OCAMLVERSION" ; then
            AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
        else
            AC_MSG_RESULT(ok)
            OCAMLC=$OCAMLCDOTOPT
        fi
    fi

    # checking for ocamlopt.opt
    if test "$OCAMLOPT" != no ; then
        AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
        if test "$OCAMLOPTDOTOPT" != no ; then
            AC_MSG_CHECKING(ocamlc.opt version)
            TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
            if test "$TMPVER" != "$OCAMLVERSION" ; then
                AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
            else
                AC_MSG_RESULT(ok)
                OCAMLOPT=$OCAMLOPTDOTOPT
            fi
        fi
    fi

    # ocamldep, ocamllex and ocamlyacc should also be present in the path
    AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
    if test "$OCAMLDEP" = no ; then
        AC_MSG_WARN([Cannot find ocamldep.])
    fi

    AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
    if test "$OCAMLLEX" = no ; then
        AC_MSG_WARN([Cannot find ocamllex.])
    else
        AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
        if test "$OCAMLLEXDOTOPT" != no ; then
            OCAMLLEX=$OCAMLLEXDOTOPT
        fi
    fi

    AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
    if test "$OCAMLYACC" = no ; then
        AC_MSG_WARN([Cannot find ocamlyacc.])
    fi

    AC_CHECK_PROG(OCAMLWEB,ocamlweb,ocamlweb,true)

    # platform
    AC_MSG_CHECKING(platform)
    if echo "let _ = Sys.os_type" | ocaml | grep -q Win32; then
        AC_MSG_RESULT(Win32)
        OCAMLWIN32=yes
    else
        AC_MSG_RESULT(Unix)
        OCAMLWIN32=no
    fi
    
    # Checking for ocamlfindlib
    AC_CHECK_PROG(OCAMLFIND,ocamlfind,ocamlfind,no)
    if test "$OCAMLFIND" = ocamlfind; then
        OCAMLC='ocamlfind ocamlc'
        if test "$OCAMLOPT" = ocamlopt; then
            OCAMLOPT='ocamlfind ocamlopt'
        fi
    fi
fi

# substitutions to perform
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(OCAMLWEB)
AC_SUBST(OCAMLWIN32)
AC_SUBST(OCAMLFIND)
])
