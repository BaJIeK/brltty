#!/bin/bash -p
###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2010 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU General Public License, as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any
# later version. Please see the file LICENSE-GPL for details.
#
# Web Page: http://mielke.cc/brltty/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

. "`dirname "${0}"`/prologue.sh"

set -e
umask 022
shopt -s nullglob extglob

declare -a documentLines
addLine() {
   local line="${1}"

   documentLines[${#documentLines[*]}]="${line}"
}

beginDocument() {
   currentHeaderLevel=0
   addDocumentHeader "${1}"
}

endDocument() {
   addDocumentTrailer
   writeDocument
}

writeDocument() {
   local count="${#documentLines[*]}"
   local index=0

   exec 3>"${outputDocument}"
   while ((index < count))
   do
      echo >&3 "${documentLines[index++]}"
   done
   exec 3>&-
}

beginSection() {
   highestHeaderLevel="${currentHeaderLevel}"
   currentHeaderLevel=$((currentHeaderLevel + 1))
   addSectionHeader "${1}"
}

endSection() {
   currentHeaderLevel=$((currentHeaderLevel - 1))
   addSectionTrailer
}

beginLayoutList() {
   layoutListed=false
}

endLayoutList() {
   ! "${layoutListed}" || {
      addLayoutListTrailer
   }
}

beginLayoutEntry() {
   local prefix="${1}"

   local layout="${inputFile##*/}"
   layout="${layout%.*}"
   layout="${layout##*-}"

   outputFile="${outputDirectory}/${prefix}-${layout}.${plainTextExtension}"
}

endLayoutEntry() {
   local category="${1}"

   exec 4<"${outputFile}"
   local description
   read -r -u 4 description
   exec 4<&-

   description="${description} "
   description="${description#* for }"
   [ -z "${category}" ] || description="${description#${category} }"
   description="${description% }"

   local prefix="All Models"
   [ -z "${description}" ] || {
      if [ "${description}" = "${description#(}" ]
      then
         prefix=""
      else
         prefix="${prefix} "
      fi
   }
   description="${prefix}${description}"

   "${layoutListed}" || {
      layoutListed=true
      addLayoutListHeader
   }

   addLine "<LI><A HREF=\"${outputFile##*/}\">${description}</A>"
}

translateKeyTable() {
   local program="${inputDirectory}/Programs/ktbtest"
   [ -x "${program}" ] || make -C "${program%/*}" -s "${program##*/}"
   "${program}" -D"../lib" -T"../${tablesSubdirectory}" -l "${inputFile##*/}" >"${outputFile}"
}

inputDirectory="$(dirname "${0}")"
outputDocument="doc-ktb/"

while getopts ":i:o:" option
do
   case "${option}"
   in
      i) inputDirectory="${OPTARG}";;
      o) outputDocument="${OPTARG}";;
      :) syntaxError "missing value: -${OPTARG}";;
     \?) syntaxError "unknown option: -${OPTARG}";;
      *) syntaxError "unimplemented option: -${option}";;
   esac
done

shift $((OPTIND - 1))
[ "${#}" -eq 0 ] || syntaxError "too many parameters"

verifyInputDirectory "${inputDirectory}"

outputFile="${outputDocument##*/}"
if [ "${outputFile}" = "${outputDocument}" ]
then
   outputDirectory="."
else
   outputDirectory="${outputDocument%/*}"
fi
[ "${outputDirectory%/}" != "${outputDirectory}" ] || outputDirectory="${outputDirectory}/"
[ -n "${outputFile}" ] || outputFile="index.html"
outputDocument="${outputDirectory}${outputFile}"
verifyOutputDirectory "${outputDirectory}"

outputFormat="${outputFile##*.}"
[ "${outputFormat}" != "${outputFile}" ] || syntaxError "unknown output format"
case "${outputFormat}"
in
   html)
      addDocumentHeader() {
         addLine "<HTML>"
         addLine "<HEAD>"
         addLine "<TITLE>${1}</TITLE>"
         addLine "</HEAD>"

         addLine "<BODY>"
         beginSection "${1}"
      }

      addDocumentTrailer() {
         endSection
         addLine "</BODY>"
         addLine "</HTML>"
      }

      addSectionHeader() {
         addLine "<H${currentHeaderLevel}>${1}</H${currentHeaderLevel}>"
      }

      addSectionTrailer() {
         [ "${currentHeaderLevel}" -ne "${highestHeaderLevel}" ] || addLine "<HR>"
      }

      addLayoutListHeader() {
         addLine "<UL>"
      }

      addLayoutListTrailer() {
         addLine "</UL>"
      }
      ;;

   sgml)
      addDocumentHeader() {
         addLine "<sect>${1}<p>"
      }

      addDocumentTrailer() {
         :
      }

      addSectionHeader() {
         addLine "<sect${currentHeaderLevel}>${1}<p>"
      }

      addSectionTrailer() {
         [ "${currentHeaderLevel}" -ne "${highestHeaderLevel}" ] || addLine ""
      }

      addLayoutListHeader() {
         addLine "<itemize>"
      }

      addLayoutListTrailer() {
         addLine "</itemize>"
      }
      ;;

   *) syntaxError "unsupported output format: ${outputFormat}";;
esac

driversSubdirectory="Drivers/Braille"
driversDirectory="${inputDirectory}/${driversSubdirectory}"

tablesSubdirectory="Tables"
tablesDirectory="${inputDirectory}/${tablesSubdirectory}"

braillePrefix="brl"
keyboardPrefix="kbd"

plainTextExtension="txt"
hypertextExtension="html"
keyTableExtension="ktb"

beginDocument "Key Tables"

beginSection "Keyboards"
beginLayoutList
set -- "${tablesDirectory}/${keyboardPrefix}-"*".${keyTableExtension}"
for inputFile
do
   beginLayoutEntry "${keyboardPrefix}"
   translateKeyTable
   endLayoutEntry
done
endLayoutList
endSection

beginSection "Braille Drivers"
addLine "<DL>"
for driverDirectory in "${driversDirectory}/"*
do
   [ -d "${driverDirectory}" ] || continue

   driverName="${driverDirectory##*/}"
   driverCode="$(sed -n '/^DRIVER_CODE *=/s/^.*= *\([^ ]*\).*$/\1/p' "${driverDirectory}/Makefile.in")"

   header="${driverName}"
   inputFile="${driverDirectory}/README"
   [ ! -f "${inputFile}" ] || {
      outputFile="${outputDirectory}/${braillePrefix}-${driverCode}.${plainTextExtension}"
      cp -a -- "${inputFile}" "${outputFile}"
      header="<A HREF=\"${outputFile##*/}\">${header}</A>"
   }
   addLine "<DT>${header}<DD>"

   beginLayoutList
   set -- "${tablesDirectory}/${braillePrefix}-${driverCode}-"*".${keyTableExtension}"
   if [ "${#}" -gt 0 ]
   then
      for inputFile
      do
         beginLayoutEntry "${braillePrefix}-${driverCode}"
         translateKeyTable
         endLayoutEntry "${driverName}"
      done
   else
      set -- "${tablesDirectory}/${braillePrefix}-${driverCode}-"*".${plainTextExtension}"
      for inputFile
      do
         beginLayoutEntry "${braillePrefix}-${driverCode}"
         cp -a -- "${inputFile}" "${outputFile}"
         endLayoutEntry "${driverName}"
      done
   fi

   endLayoutList
done
addLine "</DL>"
endSection

endDocument
exit 0
