###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2006 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU General Public License, as published by the Free Software
# Foundation.  Please see the file COPYING for details.
#
# Web Page: http://mielke.cc/brltty/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

all: all-brltty all-brltest all-scrtest tbltest$X ctbtest$X tunetest$X $(ALL_API)
all-brltty: brltty$X $(BRAILLE_DRIVERS) $(BRAILLE_HELP) $(SPEECH_DRIVERS) $(SCREEN_DRIVERS)
all-brltest: brltest$X $(BRAILLE_DRIVERS)
all-spktest: spktest$X $(SPEECH_DRIVERS)
all-scrtest: scrtest$X $(SCREEN_DRIVERS)
all-api: apitest$X $(ALL_XBRLAPI) $(ALL_API_BINDINGS)
all-xbrlapi: xbrlapi$X

###############################################################################

options.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/options.c

lock.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/lock.c

charset.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/charset.c

###############################################################################

tbl.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/tbl.c

tbl_native.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/tbl_native.c

tbl_gnome.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/tbl_gnome.c

###############################################################################

ctb_compile.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/ctb_compile.c

ctb_translate.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/ctb_translate.c

###############################################################################

SCREEN_OBJECTS = scr.$O scr_base.$O scr_help.$O scr_frozen.$O scr_main.$O scr_real.$O

scr.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scr.c

scr_base.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scr_base.c

scr_help.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scr_help.c

scr_frozen.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scr_frozen.c

scr_main.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scr_main.c

scr_real.$O: scr.auto.h
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scr_real.c

route.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/route.c

###############################################################################

TUNE_OBJECTS = tunes.$O $(BEEPER_OBJECTS) $(PCM_OBJECTS) $(MIDI_OBJECTS) $(FM_OBJECTS)

tunes.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/tunes.c

beeper.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/beeper.c

pcm.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/pcm.c

midi.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/midi.c

fm.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/fm.c

adlib.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/adlib.c

###############################################################################

API_OBJS = api_client.$O
API_NAME = brlapi
API_ARC = $(ARC_PFX)$(API_NAME).$(ARC_EXT)
API_LIB = $(LIB_PFX)$(API_NAME).$(LIB_EXT)
API_DLL = $(LIB_PFX)$(API_NAME)-$(API_VERSION).$(LIB_EXT)
API_IMPLIB = $(ARC_PFX)$(API_NAME).$(LIB_EXT).$(ARC_EXT)
API_IMPLIB_VERSIONED = $(ARC_PFX)$(API_NAME)-$(API_RELEASE).$(LIB_EXT).$(ARC_EXT)

api: $(API_DYNAMIC_LIBRARY) $(API_ARC)

api-dynamic-library: $(API_LIB)
$(API_LIB): $(API_OBJS)
	$(MKLIB:<name>=${API_LIB}.${API_VERSION}) $@ $(API_OBJS) $(API_LIBRARIES)

api-dynamic-library-windows: $(API_DLL)
$(API_DLL): $(API_OBJS)
	-rm -f implib.a
	$(MKLIB:<name>=${API_LIB}.${API_VERSION}) $@ $(API_OBJS) $(API_LIBRARIES)
	[ ! -f implib.a ] || mv implib.a $(API_IMPLIB)

$(API_ARC): $(API_OBJS)
	ar rc $@ $(API_OBJS)
	$(RANLIB) $@

api_client.$O: api_constants.auto.h api_keytab.auto.h
	$(CC) $(LIBCFLAGS) -c $(SRC_DIR)/api_client.c

api_constants.auto.h: $(SRC_DIR)/brldefs.h $(SRC_DIR)/brldefs.awk $(SRC_DIR)/api_constants.awk
	$(AWK) -f $(SRC_DIR)/brldefs.awk -f $(SRC_DIR)/api_constants.awk $(SRC_DIR)/brldefs.h >$@

api_keytab.auto.h: $(SRC_DIR)/brldefs.h $(SRC_DIR)/brldefs.awk $(SRC_DIR)/api_keytab.awk
	$(AWK) -f $(SRC_DIR)/brldefs.awk -f $(SRC_DIR)/api_keytab.awk $(SRC_DIR)/brldefs.h >$@

api_brldefs.auto.h: $(SRC_DIR)/brldefs.h $(SRC_DIR)/brldefs.awk $(SRC_DIR)/api_brldefs.awk
	$(AWK) -f $(SRC_DIR)/brldefs.awk -f $(SRC_DIR)/api_brldefs.awk $(SRC_DIR)/brldefs.h >$@

api_server.$O: api_constants.auto.h
	$(CC) $(CFLAGS) -c $(SRC_DIR)/api_server.c

keyrangelist.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/keyrangelist.c

all-api-bindings: api
	for language in $(API_BINDINGS); \
	do (cd $(BLD_TOP)$(BND_DIR)/$$language && $(MAKE) all) || exit 1; \
	done

install-api-bindings: all-api-bindings
	for language in $(API_BINDINGS); \
	do (cd $(BLD_TOP)$(BND_DIR)/$$language && $(MAKE) install) || exit 1; \
	done

uninstall-api-bindings:
	for language in $(API_BINDINGS); \
	do (cd $(BLD_TOP)$(BND_DIR)/$$language && $(MAKE) uninstall); \
	done

###############################################################################

BRLTTY_OBJECTS = main.$O config.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O queue.$O async.$O auth.$O cut.$O cmd.$O at2.$O lock.$O charset.$O $(TBL_OBJECTS) $(CTB_OBJECTS) serial.$O $(USB_OBJECTS) $(BLUETOOTH_OBJECTS) drivers.$O $(SCREEN_OBJECTS) $(SCREEN_DRIVER_OBJECTS) route.$O brl.$O $(BRAILLE_DRIVER_OBJECTS) $(SPEECH_OBJECT) $(SPEECH_DRIVER_OBJECTS) $(TUNE_OBJECTS) $(API_OBJECTS)

brltty$X: $(BRLTTY_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(BRLTTY_OBJECTS) $(BRAILLE_DRIVER_LIBRARIES) $(SPEECH_DRIVER_LIBRARIES) $(SCREEN_DRIVER_LIBRARIES) $(LDLIBS)

main.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/main.c

config.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/config.c

queue.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/queue.c

async.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/async.c

auth.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/auth.c

misc.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/misc.c

drivers.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/drivers.c

cut.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/cut.c

cmd.$O: cmds.auto.h
	$(CC) $(CFLAGS) -c $(SRC_DIR)/cmd.c

at2.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/at2.c

io_misc.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/io_misc.c

serial.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/serial.c

brl.$O: brl.auto.h text.auto.h attrib.auto.h
	$(CC) $(CFLAGS) -c $(SRC_DIR)/brl.c

spk.$O: spk.auto.h
	$(CC) $(CFLAGS) -c $(SRC_DIR)/spk.c

###############################################################################

sys_skeleton.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_skeleton.c

sys_linux.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_linux.c

sys_solaris.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_solaris.c

sys_hpux.$O:
	$(CC) $(CFLAGS) -I/opt/audio/include -c $(SRC_DIR)/sys_hpux.c

sys_openbsd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_openbsd.c

sys_freebsd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_freebsd.c

sys_netbsd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_netbsd.c

sys_osf.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_osf.c

sys_qnx.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_qnx.c

sys_hurd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_hurd.c

sys_darwin.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_darwin.c

sys_windows.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_windows.c

sys_msdos.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/sys_msdos.c

###############################################################################

usb.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb.c

usb_skeleton.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_skeleton.c

usb_linux.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_linux.c

usb_solaris.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_solaris.c

usb_openbsd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_openbsd.c

usb_freebsd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_freebsd.c

usb_netbsd.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_netbsd.c

usb_darwin.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_darwin.c

usb_libusb.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/usb_libusb.c

###############################################################################

bluetooth.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/bluetooth.c

bluetooth_skeleton.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/bluetooth_skeleton.c

bluetooth_linux.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/bluetooth_linux.c

###############################################################################

BRLTEST_OBJECTS = brltest.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O queue.$O async.$O tbl.$O tbl_native.$O cmd.$O at2.$O drivers.$O brl.$O $(BRAILLE_DRIVER_OBJECTS) serial.$O $(USB_OBJECTS) $(BLUETOOTH_OBJECTS)

brltest$X: $(BRLTEST_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(BRLTEST_OBJECTS) $(BRAILLE_DRIVER_LIBRARIES) $(LDLIBS)

brltest.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/brltest.c

###############################################################################

SPKTEST_OBJECTS = spktest.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O queue.$O drivers.$O spk.$O $(SPEECH_DRIVER_OBJECTS)

spktest$X: $(SPKTEST_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(SPKTEST_OBJECTS) $(SPEECH_DRIVER_LIBRARIES) $(LDLIBS)

spktest.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/spktest.c

###############################################################################

SCRTEST_OBJECTS = scrtest.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O drivers.$O $(SCREEN_OBJECTS) $(SCREEN_DRIVER_OBJECTS) route.$O

scrtest$X: $(SCRTEST_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(SCRTEST_OBJECTS) $(SCREEN_DRIVER_LIBRARIES) $(LDLIBS)

scrtest.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/scrtest.c

###############################################################################

TBLTEST_OBJECTS = tbltest.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O lock.$O charset.$O tbl.$O tbl_native.$O tbl_gnome.$O

tbltest$X: $(TBLTEST_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(TBLTEST_OBJECTS) $(LDLIBS)

tbltest.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/tbltest.c

###############################################################################

CTBTEST_OBJECTS = ctbtest.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O ctb_compile.$O ctb_translate.$O tbl.$O tbl_native.$O

ctbtest$X: $(CTBTEST_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(CTBTEST_OBJECTS) $(LDLIBS)

ctbtest.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/ctbtest.c

###############################################################################

TUNETEST_OBJECTS = tunetest.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O $(TUNE_OBJECTS)

tunetest$X: $(TUNETEST_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(TUNETEST_OBJECTS) $(LDLIBS)

tunetest.$O:
	$(CC) $(CFLAGS) -c $(SRC_DIR)/tunetest.c

###############################################################################

APITEST_OBJECTS = apitest.$O cmd.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O

apitest$X: $(APITEST_OBJECTS) api
	$(CC) $(LDFLAGS) -o $@ $(APITEST_OBJECTS) -L$(BLD_DIR) -lbrlapi $(LDLIBS)

apitest.$O: api_constants.auto.h
	$(CC) $(CFLAGS) -c $(SRC_DIR)/apitest.c

###############################################################################

braille-drivers: txt2hlp
	for driver in $(BRAILLE_EXTERNAL_DRIVER_NAMES); \
	do (cd $(BLD_TOP)$(BRL_DIR)/$$driver && $(MAKE) braille-driver braille-help) || exit 1; \
	done

braille-help: txt2hlp
	for driver in $(BRAILLE_INTERNAL_DRIVER_NAMES); \
	do (cd $(BLD_TOP)$(BRL_DIR)/$$driver && $(MAKE) braille-help) || exit 1; \
	done

###############################################################################

speech-drivers:
	for driver in $(SPEECH_EXTERNAL_DRIVER_NAMES); \
	do (cd $(BLD_TOP)$(SPK_DIR)/$$driver && $(MAKE) speech-driver) || exit 1; \
	done

###############################################################################

screen-drivers:
	for driver in $(SCREEN_EXTERNAL_DRIVER_NAMES); \
	do (cd $(BLD_TOP)$(SCR_DIR)/$$driver && $(MAKE) screen-driver) || exit 1; \
	done

###############################################################################

text.auto.h: $(TEXT_TABLE) tbl2hex$X
	./tbl2hex$X $(TEXT_TABLE) >$@

attrib.auto.h: $(ATTRIBUTES_TABLE) tbl2hex$X
	./tbl2hex$X $(ATTRIBUTES_TABLE) >$@

cmds.auto.h: $(SRC_DIR)/brldefs.h $(SRC_DIR)/brldefs.awk $(SRC_DIR)/cmds.awk
	$(AWK) -f $(SRC_DIR)/brldefs.awk -f $(SRC_DIR)/cmds.awk $(SRC_DIR)/brldefs.h >$@

brl.auto.h: $(SRC_DIR)/mkdrvtab
	$(SRC_DIR)/mkdrvtab BrailleDriver brl_driver_ $(BRAILLE_INTERNAL_DRIVER_CODES) >$@

spk.auto.h: $(SRC_DIR)/mkdrvtab
	$(SRC_DIR)/mkdrvtab SpeechDriver spk_driver_ $(SPEECH_INTERNAL_DRIVER_CODES) >$@

scr.auto.h: $(SRC_DIR)/mkdrvtab
	$(SRC_DIR)/mkdrvtab ScreenDriver scr_driver_ $(SCREEN_INTERNAL_DRIVER_CODES) >$@

###############################################################################

HOSTOPTS_OBJECTS = host_opts.$O host_misc.$O host_sys.$O host_io.$O

host_opts.$O: options.$O
	$(HOSTCC) $(HOSTCFLAGS) -o $@ -c $(SRC_DIR)/options.c

host_misc.$O: misc.$O
	$(HOSTCC) $(HOSTCFLAGS) -o $@ -c $(SRC_DIR)/misc.c

host_sys.$O: $(SYSTEM_OBJECT)
	$(HOSTCC) $(HOSTCFLAGS) -o $@ -c $(SRC_DIR)/$(SYSTEM_OBJECT:.${O}=.c)

host_io.$O: io_misc.$O
	$(HOSTCC) $(HOSTCFLAGS) -o $@ -c $(SRC_DIR)/io_misc.c

###############################################################################

TXT2HLP_OBJECTS = txt2hlp.$O $(HOSTOPTS_OBJECTS)

txt2hlp: $(TXT2HLP_OBJECTS)
	$(HOSTCC) $(HOSTLDFLAGS) -o $@ $(TXT2HLP_OBJECTS) $(LDLIBS)

txt2hlp.$O:
	$(HOSTCC) $(HOSTCFLAGS) -c $(SRC_DIR)/txt2hlp.c

###############################################################################

TBL2HEX_OBJECTS = tbl2hex.$O host_tbl.$O host_tbl_native.$O $(HOSTOPTS_OBJECTS)

tbl2hex$X: $(TBL2HEX_OBJECTS)
	$(HOSTCC) $(HOSTLDFLAGS) -o $@ $(TBL2HEX_OBJECTS) $(LDLIBS)

tbl2hex.$O:
	$(HOSTCC) $(HOSTCFLAGS) -c $(SRC_DIR)/tbl2hex.c

host_tbl.$O: tbl.$O
	$(HOSTCC) $(HOSTCFLAGS) -o $@ -c $(SRC_DIR)/tbl.c

host_tbl_native.$O: tbl_native.$O
	$(HOSTCC) $(HOSTCFLAGS) -o $@ -c $(SRC_DIR)/tbl_native.c

###############################################################################

XBRLAPI_OBJECTS = xbrlapi.$O options.$O misc.$O $(SYSTEM_OBJECT) io_misc.$O

xbrlapi$X: $(XBRLAPI_OBJECTS) api
	$(CC) $(LDFLAGS) -o $@ $(XBRLAPI_OBJECTS) -L. -lbrlapi $(XLIBS) $(LDLIBS)

xbrlapi.$O: api_constants.auto.h
	$(CC) $(CFLAGS) $(X_CFLAGS) -c $(SRC_DIR)/xbrlapi.c

###############################################################################

check-braille: brltty braille-drivers
	for code in $(BRAILLE_DRIVER_CODES); \
	do ls -l $(BLD_TOP)$(DRV_DIR)/libbrlttyb$$code.$(MOD_EXT) || exit 10; \
	   ./brltty -v -q -N -e -f /dev/null -b $$code -s no -L "$(BLD_TOP)$(DRV_DIR)" -D "$(BLD_TOP)$(DAT_DIR)" -T "$(BLD_TOP)$(TBL_DIR)" -C "$(BLD_TOP)$(CTB_DIR)" 2>&1 || exit 11; \
	done

check-speech: brltty speech-drivers
	for code in $(SPEECH_DRIVER_CODES); \
	do ls -l $(BLD_TOP)$(DRV_DIR)/libbrlttys$$code.$(MOD_EXT) || exit 10; \
	   ./brltty -v -q -N -e -f /dev/null -b no -s $$code -L "$(BLD_TOP)$(DRV_DIR)" -D "$(BLD_TOP)$(DAT_DIR)" -T "$(BLD_TOP)$(TBL_DIR)" -C "$(BLD_TOP)$(CTB_DIR)" 2>&1 || exit 11; \
	done

###############################################################################

install:: install-programs install-help install-tables $(INSTALL_DRIVERS) install-manpages $(INSTALL_API)

install-programs: brltty$X install-program-directory
	$(INSTALL_PROGRAM) brltty$X $(INSTALL_ROOT)$(PROGRAM_DIRECTORY) 
	$(INSTALL_DATA) brltty-config $(INSTALL_ROOT)$(PROGRAM_DIRECTORY) 
	$(INSTALL_SCRIPT) $(SRC_DIR)/brltty-install $(INSTALL_ROOT)$(PROGRAM_DIRECTORY) 

install-xbrlapi: xbrlapi$X install-program-directory
	$(INSTALL_PROGRAM) xbrlapi$X $(INSTALL_ROOT)$(PROGRAM_DIRECTORY) 

install-program-directory:
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(PROGRAM_DIRECTORY) 

install-help: $(BRAILLE_DRIVERS) $(BRAILLE_HELP) install-data-directory
	$(INSTALL_DATA) $(BLD_TOP)$(DAT_DIR)/* $(INSTALL_ROOT)$(DATA_DIRECTORY) 

install-tables: $(INSTALL_TEXT_TABLES) $(INSTALL_ATTRIBUTES_TABLES) $(INSTALL_CONTRACTION_TABLES)

install-text-tables: install-data-directory
	$(INSTALL_DATA) $(SRC_TOP)$(TBL_DIR)/text.*.tbl $(INSTALL_ROOT)$(DATA_DIRECTORY)

install-attributes-tables: install-data-directory
	$(INSTALL_DATA) $(SRC_TOP)$(TBL_DIR)/attr*.tbl $(INSTALL_ROOT)$(DATA_DIRECTORY)

install-contraction-tables: install-data-directory
	$(INSTALL_DATA) $(SRC_TOP)$(CTB_DIR)/*.ctb $(INSTALL_ROOT)$(DATA_DIRECTORY)
	$(INSTALL_DATA) $(SRC_TOP)$(CTB_DIR)/*.cti $(INSTALL_ROOT)$(DATA_DIRECTORY)

install-data-directory:
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(DATA_DIRECTORY) 

install-drivers: $(BRAILLE_DRIVERS) $(SPEECH_DRIVERS) $(SCREEN_DRIVERS)
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(LIBRARY_DIRECTORY)
	$(INSTALL_PROGRAM) $(BLD_TOP)$(DRV_DIR)/*.$(MOD_EXT) $(INSTALL_ROOT)$(LIBRARY_DIRECTORY)

install-manpages:
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(MANPAGE_DIRECTORY)/man1
	$(INSTALL_DATA) $(BLD_TOP)$(DOC_DIR)/*.1 $(INSTALL_ROOT)$(MANPAGE_DIRECTORY)/man1

install-api: $(INSTALL_API_LIBRARIES) install-api-headers install-api-manpages install-api-key $(INSTALL_XBRLAPI) $(INSTALL_API_BINDINGS)

install-api-libraries: $(API_LIB) $(API_ARC) install-libdir-directory
	$(INSTALL_PROGRAM) $(API_LIB) $(INSTALL_ROOT)$(libdir)/$(API_LIB).$(API_RELEASE)
	$(SYMLINK) -f $(API_LIB).$(API_RELEASE) $(INSTALL_ROOT)$(libdir)/$(API_LIB)
	$(CONFLIBDIR) $(INSTALL_ROOT)$(libdir)
	$(INSTALL_DATA) $(API_ARC) $(INSTALL_ROOT)$(libdir)

install-api-libraries-windows: $(API_DLL) $(API_ARC) install-program-directory install-libdir-directory
	$(INSTALL_PROGRAM) $(API_DLL) $(INSTALL_ROOT)$(PROGRAM_DIRECTORY)
	$(INSTALL_DATA) $(API_IMPLIB) $(INSTALL_ROOT)$(libdir)/$(API_IMPLIB_VERSIONED)
	cd $(INSTALL_ROOT)$(libdir) && $(SYMLINK) -f $(API_IMPLIB_VERSIONED) $(API_IMPLIB)
	$(INSTALL_DATA) $(API_ARC) $(INSTALL_ROOT)$(libdir)

install-libdir-directory:
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(libdir)

install-api-headers: api_constants.auto.h api_brldefs.auto.h
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)
	$(INSTALL_DATA) api.h $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)
	$(INSTALL_DATA) $(SRC_DIR)/api_protocol.h $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)
	$(INSTALL_DATA) $(SRC_DIR)/api_constants.auto.h $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)/api_constants.h
	$(INSTALL_DATA) $(SRC_DIR)/api_brldefs.auto.h $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)/brldefs.h

install-api-manpages:
	$(INSTALL_DIRECTORY) $(INSTALL_ROOT)$(MANPAGE_DIRECTORY)/man3
	set -- $(SRC_TOP)$(DOC_DIR)/BrlAPIref/man/man3/brlapi_*.3 && [ -f $$1 ] || exit 0 && \
	$(INSTALL_DATA) $$* $(INSTALL_ROOT)$(MANPAGE_DIRECTORY)/man3

install-api-key:
	file=$(sysconfdir)/$(API_AUTHFILE) && \
	if test ! -f $$file -a -w $(sysconfdir) -a -z "$(INSTALL_ROOT)"; \
	then umask 077 && $(SRC_DIR)/brltty-genkey $$file; fi

###############################################################################

uninstall:: uninstall-programs uninstall-data uninstall-libraries uninstall-manpages uninstall-headers uninstall-api-bindings

uninstall-programs:
	-rm -f $(INSTALL_ROOT)$(PROGRAM_DIRECTORY)/brltty$X
	-rm -f $(INSTALL_ROOT)$(PROGRAM_DIRECTORY)/brltty-config
	-rm -f $(INSTALL_ROOT)$(PROGRAM_DIRECTORY)/brltty-install
	-rm -f $(INSTALL_ROOT)$(PROGRAM_DIRECTORY)/xbrlapi$X

uninstall-data:
	-rm -f $(INSTALL_ROOT)$(DATA_DIRECTORY)/*.tbl
	-rm -f $(INSTALL_ROOT)$(DATA_DIRECTORY)/*.ctb
	-rm -f $(INSTALL_ROOT)$(DATA_DIRECTORY)/*.cti
	-rm -f $(INSTALL_ROOT)$(DATA_DIRECTORY)/brltty*
	-[ -d $(INSTALL_ROOT)$(DATA_DIRECTORY) ] && rmdir $(INSTALL_ROOT)$(DATA_DIRECTORY)

uninstall-libraries:
	-rm -f $(INSTALL_ROOT)$(LIBRARY_DIRECTORY)/$(LIB_NAME)*
	-[ -d $(INSTALL_ROOT)$(LIBRARY_DIRECTORY) ] && rmdir $(INSTALL_ROOT)$(LIBRARY_DIRECTORY)
	-rm -f $(INSTALL_ROOT)$(libdir)/$(API_LIB)
	-rm -f $(INSTALL_ROOT)$(libdir)/$(API_LIB).$(API_RELEASE)
	$(CONFLIBDIR) $(INSTALL_ROOT)$(libdir)
	-rm -f $(INSTALL_ROOT)$(libdir)/$(API_ARC)
	-rm -f $(INSTALL_ROOT)$(libdir)/$(API_IMPLIB)
	-rm -f $(INSTALL_ROOT)$(libdir)/$(API_IMPLIB_VERSIONED)
	-rm -f $(INSTALL_ROOT)$(PROGRAM_DIRECTORY)/$(API_DLL)

uninstall-manpages:
	-rm -f $(INSTALL_ROOT)$(MANPAGE_DIRECTORY)/man1/brltty.1
	-rm -f $(INSTALL_ROOT)$(MANPAGE_DIRECTORY)/man3/brlapi_*.3

uninstall-headers:
	-rm -f $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)/api.h
	-rm -f $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)/api_*.h
	-rm -f $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)/brldefs.h
	-rm -f $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)/brldefs-*.h
	-[ -d $(INSTALL_ROOT)$(INCLUDE_DIRECTORY) ] && rmdir $(INSTALL_ROOT)$(INCLUDE_DIRECTORY)

###############################################################################

install uninstall::
	-set -- $(BRAILLE_EXTERNAL_DRIVER_NAMES); \
	for driver do (cd $(BLD_TOP)$(BRL_DIR)/$$driver && $(MAKE) $@); done
	-set -- $(SPEECH_EXTERNAL_DRIVER_NAMES); \
	for driver do (cd $(BLD_TOP)$(SPK_DIR)/$$driver && $(MAKE) $@); done
	-set -- $(SCREEN_EXTERNAL_DRIVER_NAMES); \
	for driver do (cd $(BLD_TOP)$(SCR_DIR)/$$driver && $(MAKE) $@); done

distclean clean::
	-set -- $(BRAILLE_EXTERNAL_DRIVER_NAMES) $(BRAILLE_INTERNAL_DRIVER_NAMES); \
	for driver do (cd $(BLD_TOP)$(BRL_DIR)/$$driver && $(MAKE) $@); done
	-set -- $(SPEECH_EXTERNAL_DRIVER_NAMES) $(SPEECH_INTERNAL_DRIVER_NAMES); \
	for driver do (cd $(BLD_TOP)$(SPK_DIR)/$$driver && $(MAKE) $@); done
	-set -- $(SCREEN_EXTERNAL_DRIVER_NAMES) $(SCREEN_INTERNAL_DRIVER_NAMES); \
	for driver do (cd $(BLD_TOP)$(SCR_DIR)/$$driver && $(MAKE) $@); done

clean::
	-rm -f brltty$X xbrlapi$X txt2hlp$X tbl2hex$X *test$X *-static$X
	-rm -f $(API_LIB) $(API_ARC) $(API_DLL) $(API_IMPLIB)
	-rm -f $(BLD_TOP)$(DRV_DIR)/* $(BLD_TOP)$(DAT_DIR)/*

distclean::
	-rm -f api.h
	-rm -f brltty-config
